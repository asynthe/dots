#+title: Hyprland configuration
#+property: header-args :tangle hyprland.conf
#+auto_tangle: t

* TABLE OF CONTENTS :toc:
- [[#system][System]]
  - [[#environment-variables][Environment Variables]]
  - [[#startup][Startup]]
  - [[#monitors][Monitors]]
  - [[#input-keyboard][Input (Keyboard)]]
  - [[#keywords-][Keywords (?)]]
  - [[#window-rules][Window Rules]]
- [[#rice][Rice]]
  - [[#general][General]]
  - [[#animations][Animations]]
- [[#configuration][Configuration]]
  - [[#dwindle-layout-configuration-bspwm-like][Dwindle layout configuration (BSPWM-like)]]
  - [[#master-layout-configuration-xmonad-like][Master layout configuration (Xmonad like)]]
  - [[#gestures][Gestures]]
  - [[#decoration-border-rounding-blur][Decoration (Border rounding, blur)]]
  - [[#window-swallowing][Window Swallowing]]
  - [[#default-hyprland-logo-when-no-wallpaper][Default Hyprland logo (When no Wallpaper)]]
  - [[#vrr-variable-refresh-rate][VRR (Variable Refresh Rate)]]
- [[#keybinds][Keybinds]]
  - [[#modifier-key][Modifier Key]]
  - [[#shortcuts][Shortcuts]]
  - [[#multimedia-keys][Multimedia Keys]]
  - [[#windows][Windows]]
  - [[#workspaces][Workspaces]]
  - [[#special-workspace-scratchpad][Special Workspace (Scratchpad)]]
  - [[#master--dwindle-mode][Master / Dwindle mode]]
- [[#app][App]]
  - [[#lockscreen-gtklock][LOCKSCREEN (GTKLOCK)]]
  - [[#screenshots][SCREENSHOTS]]

* System
** Environment Variables
*** NVIDIA

Note: can be run if running through a login manager, specially GDDM or greetd

#+begin_src cpp
# env = JAVA_AWT_WM_NOREPARENTING,1
# env = SDL_VIDEODRIVER,wayland
# env = GDK_BACKEND,wayland,x11

# env = QT_QPA_PLATFORM,wayland
# env = QT_QPA_PLATFORM,wayland;xcb
# env = QT_WAYLAND_DISABLE_WINDOWDECORATION,1

# env = LIBVA_DRIVER_NAME, nvidia
# env = GBM_BACKEND, nvidia-drm
# env = __GL_GSYNC_ALLOWED, 1
# env = __GL_VRR_ALLOWED, 1
# env = __GLX_VENDOR_LIBRARY_NAME, nvidia
#+end_src

Nvidia Offloading
#+begin_src cpp
# env = __NV_PRIME_RENDER_OFFLOAD, 1
# env = __NV_PRIME_RENDER_OFFLOAD_PROVIDER, NVIDIA-G0
# env = __VK_LAYER_NV_optimus, NVIDIA_only
#+end_src

Theme
#+begin_src cpp
#env = XCURSOR_THEME,Breeze
#env = XCURSOR_SIZE,24
#env = GTK_THEME,Orchis-Dark-Compact
#+end_src

Fix for mouse cursor not appearing when using nvidia drivers.
#+begin_src cpp
env = WLR_NO_HARDWARE_CURSORS,1
#+end_src

*** Screen Sharing (XDG Desktop Portal Hyprland)

What's going to be needed for Screen Sharing is 

#+begin_src cpp
env = XDG_SESSION_TYPE, wayland
env = XDG_CURRENT_DESKTOP, Hyprland
env = XDG_SESSION_DESKTOP, Hyprland
exec-once = wl-clipboard-history -t
exec-once = dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
#+end_src

A script for restarting and starting correctly (future)

#+begin_src cpp
#exec-once = ~/sync/system/script
#+end_src

_The script_

!/usr/bin/env bash

sleep 1
killall xdg-desktop-portal-hyprland
killall xdg-desktop-portal-gnome
killall xdg-desktop-portal-wlr
killall xdg-desktop-portal
/usr/libexec/xdg-desktop-portal-hyprland &
sleep 2
/usr/lib/xdg-desktop-portal &

** Startup

*DBUS*
#+begin_src cpp
exec-once = dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
#+end_src

*BAR - WAYBAR*
#+begin_src cpp
exec-once = waybar &
#+end_src

*WALLPAPER DAEMON - SWWW*
#+begin_src cpp
exec-once = swww init &
#+end_src

*JAPANESE IME - FCITX5 + MOZC*
#+begin_src cpp
exec-once = fcitx5 -d &
#+end_src

*WEECHAT TMUX SESSION*
#+begin_src cpp
exec-once = tmux new-session -d -s weechat weechat
#+end_src

*APPS*
#+begin_src cpp
exec-once = qbittorrent
#+end_src

*TERMINAL IN WORKSPACE SPECIAL*
#+begin_src cpp
exec-once = [workspace special] alacritty -e tmux attach
#+end_src

#exec-once = ~/.config/hypr/script/xdg-desktop-portal.sh
hyprctl keywords animations:enabled 0 # Start with animations disabled
exec-once = mpvpaper -f -o "loop-file=inf" eDP-1 ~/main/system/wallpapers/video/loops_1920x1080/retrowave_1920x1080.mp4 &

** Monitors

See https://wiki.hyprland.org/Configuring/Monitors/

#+begin_src cpp
monitor = eDP-1, 1920x1080@144, 0x0, 1
monitor = HDMI-A-2, 1920x1080@60, 1920x0, 1
#+end_src

** Input (Keyboard)

For all categories, see https://wiki.hyprland.org/Configuring/Variables/

+ Caps lock replaced with Escape

#+begin_src cpp
input {
    kb_layout = us
    kb_variant =
    kb_model =
    kb_options = caps:swapescape
    kb_rules =
    follow_mouse = 1
    touchpad {
        natural_scroll = no
    }
    sensitivity = 0 # -1.0 - 1.0, 0 means no modification.
}
#+end_src

** Keywords (?)

See https://wiki.hyprland.org/Configuring/Keywords/ for more information.

** Window Rules 

See https://wiki.hyprland.org/Configuring/Window-Rules/ for more information.

Example windowrule v1
~windowrule = float, ^(kitty)$~
Example windowrule v2
~windowrulev2 = float,class:^(kitty)$,title:^(kitty)$~

*Ueberzugpp*
#+begin_src cpp
windowrulev2 = noanim,class:ueberzugpp.*$
#+end_src

*Force Floating Mode*
#+begin_src cpp
windowrulev2 = float,class:^(org.keepassxc.KeePassXC)$
windowrulev2 = float,class:^(pavucontrol)$
windowrulev2 = float,class:^(Hypnotix.py)$
#+end_src

*Specific Sizes*
#+begin_src cpp
windowrulev2 = size 800 500,class:^(pavucontrol)$
#+end_src

*Lock to specific workspace*
- silent: don't change into that workspace if opening the app.
#+begin_src cpp
#windowrulev2 = workspace 1 silent,class:^(emacs)$
windowrulev2 = workspace 10 silent,class:^(org.qbittorrent.qBittorrent)$
#+end_src

*Transparency*
#+begin_src cpp
#windowrulev2 = stayfocused, class:^(firefox)$
#windowrulev2 = opacity 0.9, class:^(firefox)$
#windowrulev2 = opacity 0.9, class:^(org.pwmt.zathura)$
#windowrulev2 = opacity 0.7, class:^(Spotify)$
#+end_src

*** FIREFOX / LIBREOFFICE WINDOW RULE

#+begin_src cpp
windowrulev2 = nomaximizerequest,class:^(firefox),title:(Picture-in-Picture)
windowrulev2 = nomaximizerequest,class:^(libreoffice-calc),title:(.*)(- LibreOffice Calc)$
#+end_src

The LibreOffice window rule: (.*)(- LibreOffice Calc)$
Means match /any/ window that contains a string of "- LibreOffice Calc"

* Rice
** General
*** Opening Bracket

It belongs to the general section, so here's the entry bracket.

Source a file (multi-file configs)
source = ~/.config/hypr/myColors.conf

See https://wiki.hyprland.org/Configuring/Keywords/ for more
See https://wiki.hyprland.org/Configuring/Variables/ for more

#+begin_src cpp
general {
#+end_src

*** Gaps

#+begin_src cpp
gaps_in = 4
gaps_out = 10
#+end_src

*** Border

#+begin_src cpp
border_size = 1
no_border_on_floating=1
#+end_src

*** Border Color

*Xmonad Red*
#+begin_src cpp
#col.active_border = rgb(ff0000)
#col.inactive_border = rgb(000000) # BLACK
#col.inactive_border = rgb(dddddd) # WHITE
#+end_src

*Purple*
#+begin_src cpp
col.active_border = rgb(451F67)
col.inactive_border = rgb(231431)
#+end_src

*Breeze Gradient*
#+begin_src cpp
#col.active_border = rgba(33ccffee) rgba(00ff99ee) 45deg
#col.inactive_border = rgba(595959aa)
#+end_src

*** Hide cursor after x seconds

#+begin_src cpp
cursor_inactive_timeout = 2
#+end_src

*** Layout

#+begin_src cpp
layout = dwindle
#+end_src

*** Closing Bracket
#+begin_src cpp
}
#+end_src

** Animations

Some default animations,
see https://wiki.hyprland.org/Configuring/Animations for more.

Disable animations with ~Super key + a~

Animations types list:
- slide
- slidevert
- fade
- slidefade
- slidefadevert

#+begin_src cpp
#bind = SUPER, a, exec, hyprctl keyword animations:enabled 0

animations {
enabled = yes

bezier = myBezier, 0.05, 0.9, 0.1, 1.05

animation = windows, 1, 7, myBezier
animation = windowsOut, 1, 7, default, popin 80%
animation = border, 1, 10, default
animation = fade, 1, 7, default
animation = workspaces, 1, 6, default, slide
animation = specialWorkspace, 1, 3, default, fade
}
#+end_src

* Configuration
** Dwindle layout configuration (BSPWM-like)

#+begin_src cpp
dwindle {
#pseudotile = true
preserve_split = true # you probably want this
no_gaps_when_only = true # smart gaps
#smart_split = true
smart_resizing = true
}
#+end_src

** Master layout configuration (Xmonad like)

#+begin_src cpp
master {
new_is_master = true
inherit_fullscreen = true
no_gaps_when_only = true
}
#+end_src

** Gestures

#+begin_src cpp
gestures {
# See https://wiki.hyprland.org/Configuring/Variables/ for more
workspace_swipe = on
}

# Example per-device config
# See https://wiki.hyprland.org/Configuring/Keywords/#executing for more
device:epic mouse V1 {
sensitivity = -0.5
}
#+end_src

** Decoration (Border rounding, blur)

See https://wiki.hyprland.org/Configuring/Variables/ for more

#+begin_src cpp
decoration {
rounding = 0
#blur = yes
#blur_size = 7
#blur_passes = 2
#blur_new_optimizations = on
drop_shadow = no
shadow_range = 4
shadow_render_power = 3
col.shadow = rgba(1a1a1aee)
}
#+end_src

** Window Swallowing

Hide the terminal when i open software from it, thanks.

#+begin_src cpp
misc {
enable_swallow = true
swallow_regex = ^(Alacritty)$
swallow_regex = ^(alacritty)$
swallow_regex = ^(kitty)$
#+end_src

** Default Hyprland logo (When no Wallpaper)

You can disable it if you want it, it will show you just a grey screen.

#+begin_src cpp
disable_hyprland_logo = true
#force_hypr_chan = false
disable_splash_rendering = true
#+end_src

** VRR (Variable Refresh Rate)

https://wiki.archlinux.org/title/Variable_refresh_rate

Enable VRR on monitors that support it.
Must be a monitor with G-SYNC for NVIDIA GPU's, or FreeSync for AMD GPU's.

#+begin_src cpp
vrr = 1
}
#+end_src

* Keybinds
** Modifier Key

Find the used key convention on the next link:
https://github.com/xkbcommon/libxkbcommon/blob/master/include/xkbcommon/xkbcommon-keysyms.h

Set up the modifier key!
#+begin_src cpp
$mainMod = ALT
bind = $mainMod, e, exec, alacritty -e tmux attach
#+end_src

** Shortcuts

Here are my main system keybindings.

FIX
# Alt + s -> screenshot
# Alt + Shift + s -> dpms off (screen off)
# CAREFUL, can't turn screen back on.
#bindl = $mainMod SHIFT, s, exec, sleep 1 && hyprctl dispatch dpms off

#+begin_src cpp
bind = $mainMod SHIFT, return, exec, alacritty
#bind = $mainMod, return, exec, cool-retro-term
#bind = $mainMod return, exec, emacsclient -c -a "emacs"
bind = $mainMod SHIFT, c, killactive,

# Wofi runs on first press, closes on second
bind = $mainMod, p, exec, wofi --show drun

# APPS
bind = $mainMod, e, exec, emacs
bind = $mainMod, v, exec, pavucontrol
bind = $mainMod SHIFT, v, exec, alacritty -e "vis"
bind = $mainMod SHIFT, m, exec, alacritty -e "ncmpcpp"
bind = $mainMod, t, exec, hypnotix

# Alt + q -> lock screen (gtk lock)
# Alt + Shift + Q -> quit Hyprland
#bind = $mainMod, q, exec, gtklock
bind = $mainMod SHIFT, o, exit,
  
bind = $mainMod, m, fullscreen,
bind = $mainMod, f, togglefloating, 
bind = $mainMod, d, togglesplit, # dwindle
bind = $mainMod, g, pseudo, # dwindle
#+end_src

** Multimedia Keys

*Audio - Pipewire / Wireplumber*
#+begin_src cpp
binde =, XF86AudioRaiseVolume, exec, wpctl set-volume -l 1.5 @DEFAULT_AUDIO_SINK@ 5%+ 
binde =, XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
bind =, XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
#+end_src

Mute mic disabled as i don't seem to have a mute mic key
#+begin_src cpp
#bind =, XF86AudioMicMute, exec, wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle
#+end_src

*Brightness - brightnessctl*
#+begin_src cpp
binde =, XF86MonBrightnessUp, exec, brightnessctl set 10%+
binde =, XF86MonBrightnessDown, exec, brightnessctl set 10%-
#+end_src

*Audio - playerctl*
#+begin_src cpp
bind =, XF86AudioPlay, exec, playerctl play-pause
bind =, XF86AudioNext, exec, playerctl next
bind =, XF86AudioPrev, exec, playerctl previous
#bind =, XF86AudioStop, exec, playerctl stop
#+end_src

** Windows

Alt + Comma / Period = Change monitor focus
Alt + Shift + Comma / Period = Change workspace
Alt + Tab = Change window focus

#+begin_src cpp
binde = $mainMod, comma, workspace, e-1
binde = $mainMod, period, workspace, e+1
binde = $mainMod SHIFT, comma, focusmonitor, -1
binde = $mainMod SHIFT, period, focusmonitor, +1

binde = $mainMod, TAB, movefocus, r
#+end_src

SCROLL THROUGH WORKSPACES WITH ALT + MOUSE SCROLL
#+begin_src cpp
bind = $mainMod, mouse_up, workspace, e+1
bind = $mainMod, mouse_down, workspace, e-1
#+end_src

*** Change Focus

Vi motions for changing the window focus.
#+begin_src cpp
binde = $mainMod, h, movefocus, l
binde = $mainMod, j, movefocus, d
binde = $mainMod, k, movefocus, u
binde = $mainMod, l, movefocus, r
#+end_src

Arrow keys for changing window focus.
/Currently disable for usage of keys in Emacs Org Mode./

#+begin_src cpp
#binde = $mainMod, left, movefocus, l
#binde = $mainMod, down, movefocus, d
#binde = $mainMod, up, movefocus, u
#binde = $mainMod, right, movefocus, r
#+end_src

*** Swap

It needs to be in *Tiling mode* for windows to be swapped around
#+begin_src cpp
bind = $mainMod SHIFT, h, movewindow, l
bind = $mainMod SHIFT, j, movewindow, d
bind = $mainMod SHIFT, k, movewindow, u
bind = $mainMod SHIFT, l, movewindow, r
#+end_src

*** Resize

#+begin_src cpp
binde = $mainMod CTRL, h, resizeactive, -45 0
binde = $mainMod CTRL, j, resizeactive, 0 45
binde = $mainMod CTRL, k, resizeactive, 0 -45
binde = $mainMod CTRL, l, resizeactive, 45 0
#+end_src

Resize with Arrow Keys
#+begin_src cpp
binde = $mainMod CTRL, left, resizeactive, -45 0
binde = $mainMod CTRL, down, resizeactive, 0 45
binde = $mainMod CTRL, up, resizeactive, 0 -45
binde = $mainMod CTRL, right, resizeactive, 45 0
#+end_src

*** Move / Resize with Mouse

Move a window with main mod + left mouse click
Resize a window with main mod + right mouse click

#+begin_src cpp
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow
#+end_src

** Workspaces
*** Switch

Change workspaces with main mod + number row
#+begin_src cpp
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10
#+end_src

*** Move windows to workspaces

#+begin_src cpp
bind = $mainMod SHIFT, 1, movetoworkspacesilent, 1
bind = $mainMod SHIFT, 2, movetoworkspacesilent, 2
bind = $mainMod SHIFT, 3, movetoworkspacesilent, 3
bind = $mainMod SHIFT, 4, movetoworkspacesilent, 4
bind = $mainMod SHIFT, 5, movetoworkspacesilent, 5
bind = $mainMod SHIFT, 6, movetoworkspacesilent, 6
bind = $mainMod SHIFT, 7, movetoworkspacesilent, 7
bind = $mainMod SHIFT, 8, movetoworkspacesilent, 8
bind = $mainMod SHIFT, 9, movetoworkspacesilent, 9
bind = $mainMod SHIFT, 0, movetoworkspacesilent, 10
#+end_src

** Special Workspace (Scratchpad)

Execute tmux inside alacritty

#+begin_src cpp
bind = $mainMod, s, togglespecialworkspace
bind = $mainMod SHIFT, s, movetoworkspace, special
#+end_src

bind = $mainMod SHIFT, return, exec, alacritty

** Master / Dwindle mode

Add here a keybind that chanes master and dwindle mode.

#+begin_src cpp

#+end_src

* App
** LOCKSCREEN (GTKLOCK)

- [[https://github.com/jovanlanik/gtklock][gtklock - github page]]
- [[https://github.com/swaywm/swayidle][swayidle - github page]]

I've set up a script that starts swayidle and:
- Turns off the screen after 20 seconds of inactivity.
- Runs gtklock after 300 seconds (5 minutes) of inactivity.
If there's any activity, it will turn on the screen again.
  
#+begin_src cpp
# swayidle script
exec-once = ~/sync/system/script/bash/idle & 

# Turn lockscreen with Alt + Escape (fix)
#bind = $mainMod, Escape, exec, #/home/asynthe/sync/system/script/dots/gtklock_wp.sh
#+end_src

*Execute gtklock when closing and reopening the laptop lid.*
#+begin_src cpp
bindl=,switch:on:Lid Switch,exec,~/sync/system/script/dots/lock_wp.sh
#+end_src

*Don't run swayidle if i'm watching something on _mpv_ (fullscreen or focused) or when _Steam_ is opened*.

Options for ~idleinhibit~
+ none
+ always
+ focus
+ fullscreen

#+begin_src cpp
windowrulev2 = idleinhibit always, class:^(steam)$
windowrulev2 = idleinhibit fullscreen, class:^(mpv)$
windowrulev2 = idleinhibit focus, class:^(mpv)$  
#+end_src

** SCREENSHOTS

(GRIM/SLURP, FLAMESHOT)

TEST: FIXING FLAMESHOT (NOT WORKING)
#+begin_src cpp
windowrulev2 = move 0 0,title:^(flameshot)
windowrulev2 = nofullscreenrequest,title:^(flameshot)
#bind = $mainMod, s, exec, grim -g "$(slurp)" 
#bind = $mainMod, # fullscreen screenshot
#+end_src

grim -g "$(slurp)" -o screenshot.png

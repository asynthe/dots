#+title: Asynthe's flake
#+property: header-args :tangle flake.nix
#+auto_tangle: t

* Table of Contents :toc:
- [[#about-flakes][About Flakes]]
  - [[#what-is-a-flake][What is a flake]]
  - [[#resources][Resources]]
  - [[#how-to-update][How to update]]
  - [[#how-to-rebuild][How to rebuild]]
  - [[#list-of-commands][List of commands]]
- [[#first-block][First block]]
- [[#outputs][Outputs]]
- [[#machines][Machines]]
  - [[#laptop][Laptop]]
  - [[#macbook][Macbook]]
  - [[#home-manager][Home Manager]]
  - [[#android-nix-on-droid][Android (Nix On Droid)]]
- [[#inputs][Inputs]]
  - [[#main][Main]]
  - [[#nix-darwin][Nix Darwin]]
  - [[#nix-on-droid][Nix On Droid]]
  - [[#repos][Repos]]
- [[#nix-configuration][Nix Configuration]]

* About Flakes

[INSERT COOL IMAGE HERE]

GITHUB-LINK][Espanol / GITHUB-LINK][日本語

** What is a flake
** Resources
** How to update

To update, we must update the *flake.lock* file, which is done by the next command: (from flake directory)
*$ nix flake update*

** How to rebuild

You may
.#genkai

Now, change the *hostname* attribute with your own

This way you can just do it like this: (from flake directory)


*$ nixos-rebuild switch --flake .*

** List of commands

|---------+-------------|
| Command | Explanation |
|---------+-------------|
| IN      | PROGRESS    |
| ...     | ...         |
|---------+-------------|

* First block

Start!
#+begin_src nix
{
  description = "asynthe's system flake";
#+end_src

* Outputs

#+begin_src nix
outputs = inputs @ {
  self,
  nixpkgs,
  #nixpkgs-stable,
  #nixpkgs-wayland,
  #nix-on-droid,
  nix-darwin,
  #nix-gaming,
  home-manager,
  ...
	}: let
  username = "asynthe";
  username_mac = "benjamindunstan";
  hostname = "genkai";
  hostname_mac = "192-168-1-123";

  x64_system = "x86_64-linux";
  x64_darwin = "aarch64-darwin";

  pkgs = nixpkgs.legacyPackages.x86_64-linux;
  
  in {
#+end_src

*In {* is here as it gives me more flexibility for moving the org boxes.

* Machines
** Laptop

#+begin_src nix
nixosConfigurations = {
  genkai = nixpkgs.lib.nixosSystem {
    system = "genkai";
    specialArgs = {inherit username inputs;};

    modules = [
      ./nix/system/laptop
      # Home Manager as a Module goes here !!!      
    ];
    };
  };
#+end_src

*** Home Manager as module

Disabled for now, but you can play around with it.

#+begin_src nix
      # Home Manager as a Module
      #home-manager.nixosModules.home-manager
      #{
      #home-manager = {
      #useGlobalPkgs = true;
      #useUserPackages = true;
      #users.${username} = import ./nix/home/linux/home.nix;
      #};
      #}

      # Testing Specialargs on Home Manager Module
      #nixosConfigurations.${hostname} = { nixpkgs.lib.nixosSystem rec {
      #({ config, lib, ... }: {
      #options.home-manager.users = lib.mkOption {
      #type = with lib.types; attrsOf (submoduleWith {
      #specialArgs = { super = config; inherit helix; };
      #});
      #};
      #})
#+end_src

** Macbook

#+begin_src nix
    darwinConfigurations = {
      ${hostname_mac} = nix-darwin.lib.darwinSystem {
        specialArgs = {inherit username_mac inputs;};
        modules = [ ./nix/darwin/configuration.nix ];
        };
      };
#+end_src

111#+begin_src nix
  macOS configuration
    darwinConfigurations =
      let
        system = x64_darwin;
        specialArgs =
        {
          inherit username_mac;
          nixpkgs = import nixpkgs {
            inherit system;
            config.allowUnfree = true;
            };
        }
        // inputs;
       base_args = {
       inherit nix-darwin home-manager system specialArgs nixpkgs;
      };
      in {
      macos = macosSystem (base_args // {
      darwin-modules = [ ./system/macos ];
      home-module = import ./home/darwin;
      });
      };
111#+end_src

** Home Manager

#+begin_src nix
      # Home Manager as a Standalone
      homeConfigurations = {
        ${username} = home-manager.lib.homeManagerConfiguration {
          inherit pkgs;
          extraSpecialArgs = {inherit username inputs;};
          modules = [ ./home/linux/home.nix ];
        };
      };
#+end_src

** Android (Nix On Droid)

#+begin_src nix
      #nixOnDroidConfigurations.default = #nix-on-droid.lib.nixOnDroidConfiguration {
        #modules = [./nix/nix-on-droid];
      #};
#+end_src

* Inputs
** Main

*NIXPKGS AND NIXPKGS STABLE*
#+begin_src nix
      }; 
  inputs = {
    # Main
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    nixpkgs-stable.url = "github:nixos/nixpkgs/nixos-23.05";
#+end_src

*HOME MANAGER*
#+begin_src nix
    # Home
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs"; 
      # Follows the nixpkgs channel defined before, 
      # to avoid different versions of nixpkgs deps problems.
    };
#+end_src

** Nix Darwin

#+begin_src nix
    # For MacOS
    nixpkgs-darwin.url = "github:nixos/nixpkgs/nixpkgs-23.05-darwin";
    nix-darwin = {
      url = "github:lnl7/nix-darwin";
      inputs.nixpkgs.follows = "nixpkgs-darwin";
    };
  };
#+end_src

** Nix On Droid

#+begin_src nix
    #nix-on-droid = {
      #url = "github:t184256/nix-on-droid/release-23.05";
      #inputs.nixpkgs.follows = "nixpkgs-stable";
      #};
#+end_src

** Repos

#+begin_src nix
    #nixpkgs-wayland.url = "github:nix-community/nixpkgs-wayland";
    #nix-gaming.url = "github:fufexan/nix-gaming";
    #hyprland.url = "github:hyprwm/Hyprland";
    #helix.url = "github:helix-editor/helix/23.05";
#+end_src

* Nix Configuration

The closing bracket is from OUTPUTs, i put it here to have more flexibility moving the configurations around.

*nixConfig* should be put inside the configurations, but this will work for now.

#+begin_src nix
  nixConfig = {
      experimental-features = [ "nix-command" "flakes" "recursive-nix" ]; # Enable flakes.
      systemFeatures = [ "recursive-nix" ];
      substituters = [
        "https://cache.nixos.org/" # The main cache, you can replace w one closer to you.
        "https://hyprland.cachix.org"
      ];
      extra-subtituters = [
        # Nix community's cache server
        "https://nix-community.cachix.org"
        "https://nixpkgs-wayland.cachix.org"
      ];

      extra-trusted-public-keys = [
        "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
        "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
        "nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA="
        "hyprland.cachix.org-1:a7pgxzMz7+chwVL3/pzj6jIBMioiJM7ypFP8PwtkuGc=" # Hyprland
        "cuda-maintainers.cachix.org-1:0dq3bujKpuEPMCX6U4WylrUDZ9JyUG0VpVZa7CNfq5E=" # Cuda Maintaners, nvidia
      ];
  };
}
#+end_src

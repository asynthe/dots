:PROPERTIES:
:ID:       a1e4c20e-a777-4e75-8bef-403b1e7c5c4a
:END:
#+title: Flakes

This is somewhat on my explanation on flakes
I could have put everything in my literate config but it is long as it is, so that's why i decided
-> [[https://github.com/asynthe/flake/blob/main/flake.org][Link to my literate config]]

* Table of Contents :toc:
- [[#what-are-flakes][/What are Flakes/]]
- [[#enabling-flakes][/Enabling Flakes/]]
- [[#using-flakes][/Using Flakes/]]
- [[#commands][/Commands/]]
  - [[#updating-the-system][/Updating the system/]]
- [[#tutorials-fix-pls][Tutorials (FIX PLS)]]
  - [[#tweag-webpages][TWEAG WEBPAGES]]
  - [[#nix-flakes-explained---vimjoyer][Nix flakes explained - Vimjoyer']]
  - [[#nixos-introduction---nix-flakes---li-yang][NixOS Introduction - Nix Flakes - Li Yang]]
- [[#resources][/Resources/]]

* /What are Flakes/

Nix Flakes allow you to have all your configuration (~configuration.nix~, ~home-manager~) in one folder and source control.

"/A flake is simply a source tree (such as a Git repository) containing a file named flake.nix that provides a standardized interface to Nix artifacts such as packages or NixOS modules. Flakes can have dependencies on other flakes, with a “lock file” pinning those dependencies to exact revisions to ensure reproducible evaluation./"

The flake file format and semantics are described in a NixOS RFC, which is currently the best reference on flakes.

*Abstract*: This RFC proposes a mechanism to package Nix expressions into composable entities called "flakes". Flakes allow hermetic, reproducible evaluation of multi-repository Nix projects; impose a discoverable, standard structure on Nix projects; and replace previous mechanisms such as Nix channels and the Nix search path.
/from [[https://github.com/NixOS/rfcs/pull/49][[RFC0049] Flakes]]/

* /Enabling Flakes/

There are different ways to enable flakes on your nix system.

You can test on a nix-shell:
~$ nix-shell -I nixpkgs=channel:nixos-23.05 --packages nixUnstable~

Or add it to ~/etc/configuration.nix~
#+begin_src nix
nix = {
  package = pkgs.nixFlakes;
  extraOptions = "experimental-features = nix-command flakes";
}
#+end_src

* /Using Flakes/

Fetching a simple Unix package called ~dwarffs~, it is on https://github.com/edolstra/dwarffs
It contains a file called ~flake.nix~.
~$ nix shell github:edolstra/dwarffs --command dwarffs --version
dwarffs 0.1.20200406.cd7955a~

* /Commands/

~$ nix flake metadata github:edolstra/dwarffs~

** /Updating the system/

Update the flake inputs, this will be the first step to updating your system if running on a flake.
~$ nix flake update~

Now, proceed to update the system
~# nixos-rebuild switch --flake .~

_note_: Depending on your setup ... (you may have to specify the 

* Tutorials (FIX PLS)
** TWEAG WEBPAGES

evaluation of nix files
derivation graph

nix is functional programming

evaluation isn't as hermetic as it should be.

basically, making a package that can work anywhere

** Nix flakes explained - Vimjoyer'

[[https://www.youtube.com/watch?v=S3VBi6kHw5c][youtube video]]

"New system for managing the nix ecosystem, including
- Nixos configuration
- Developer environments
- Derivations
and other"

By using *nix-shell* you can create temporary shells
#+begin_src nix
$ python --version
python: command not found
$ nix-shell -p python
[nix-shell:~]$ python --version
"Python 2.7.18.5"
#+end_src

You can create more complex *nix-shells*, this example using a file called ~shell.nix~
#+begin_src nix
with (import <nixpkgs> {});
mkShell {
  buildInputs = [
    pkgs.neovim
    pkgs.vim
  ];

  shellHook = ''
    echo "hello mom"
  '';
}
#+end_src

But there's a *HUGE* problem with this approach, the ~with (import <nixpkgs> {});~, which means that you're using your system _current channel version_ to grab all of the packages.

The problem comes when you have to update your system, you do it /imperatively/ with an update command (~nix-channel --update~ then ~nixos-rebuild switch~)

So if you have a *channel* with neovim version ~0.81~ and your friend has one with version ~0.9~ you can end up with completely broken neovim configuration.

** NixOS Introduction - Nix Flakes - Li Yang

[[https://tech.aufomm.com/my-nixos-journey-flakes/][blog post]]
[[https://www.youtube.com/watch?v=DXz3FJszfo0][youtube video]]

Whenever we use a nix system, we have to enable both of this imperatively
- The channel for the main system (stable, unstable)
- The channel for home manager (stable, unstable)

And they're not stored on the same folder, so we have _two configuration locations_ on our system.

We can solve this by using the nix flakes, we can even specify channels on a per-app basis.

_Tutorial_
I will be moving my main systems configuration to a flake

#+begin_src bash
$ cd ~
$ mkdir -p my-nix-flake/home-manager
$ cp /etc/nixos/configuration.nix flake/nixos
$ cp /etc/nixos/hardware-configuration.nix flake/nixos
$ cp ~/.config/home-manager/home.nix my-nix-flake/home-manager
$ cp -r ~/.config/home-manager/apps/ my-nix-flake/home-manager
#+end_src

...

To rebuild the system from a flake, run it as this:
~# nixos-rebuild switch --flake '.#hostname'~
in my case:
~# nixos-rebuild switch --flake '.#genkai'~

To rebuild home-manager from flake
~$ home-manager switch --flake '.#asynthe'~

{ nixpkgs.config.allowUnfree = true; }

ALIASES
#+begin_src 
alias update
alias rebuild='doas nixos-rebuild switch --flake "/home/asynthe/test/flake/flake.nix#genkai" && home-manager switch --flake "~/sync/system/nix/home-manager/home.nix#asynthe"'


alias nixconf='doas nvim ~/sync/system/nix/flake/configuration.nix'
alias homeconf='nvim ~/sync/system/nix/flake/home-manager/home.nix'
#+end_src
* /Resources/

Posts
+ [[https://www.tweag.io/blog/2020-05-25-flakes][NIX FLAKES, PART 1: AN INTRODUCTION AND TUTORIAL - tweag.io]]
+ [[https://www.tweag.io/blog/2020-06-25-eval-cache/][NIX FLAKES, PART 2: EVALUATION CACHING - tweag.io]]
+ [[https://www.tweag.io/blog/2020-07-31-nixos-flakes][NIX FLAKES, PART 3: MANAGING NIXOS SYSTEMS - tweag.io]]

Youtube
+ [[https://youtu.be/IrxCiNnXG4M][Beginners Guide to Nix EP1: Flakes - youtube]]
+ [[https://youtu.be/ARjAsEJ9WVY][NixOS Flake Tour - youtube]]
+ [[https://youtu.be/K54KKAx2wNc][Intro to Flakes - youtube]]

GitHub
+ [[https://github.com/Misterio77/nix-starter-configs][Nix Starter Config]]


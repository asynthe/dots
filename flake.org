:PROPERTIES:
:ID:       fd9a97e4-acc3-4bb1-aa66-6a170e5cf9ae
:END:
#+title: Asynthe's systems flake
#+property: header-args :tangle flake.nix
#+auto_tangle: t

[INSERT COOL IMAGE HERE]

Linux system
Laptop -> genkai

- /core_server.nix/ contains all that regular system must have.
- /genkai/ contains my current sy
- _basic.nix_ is contained inside _genkai_
- nor /core_server/ nor /genkai/ replaces coreutils

Home manager
- everything else
- hacking tools
home-manager replaces coreutils with the rust uutils

* Table of Contents :toc:
- [[#start---opening-bracket][Start - Opening bracket]]
- [[#outputs][Outputs]]
- [[#machines][Machines]]
  - [[#linux][Linux]]
  - [[#macos-in-progress][MacOS [IN PROGRESS]]]
  - [[#home-manager][Home Manager]]
  - [[#not-used-for-now][Not Used For Now]]
- [[#inputs][Inputs]]
  - [[#opening-bracket][Opening Bracket]]
  - [[#nixpkgs-and-nixpkgs-stable][Nixpkgs and Nixpkgs Stable]]
  - [[#home-manager-1][Home Manager]]
  - [[#apps-and-repos][Apps and Repos]]
  - [[#nix-configuration-not-added][Nix Configuration (Not added)]]
- [[#end---closing-bracket][End - Closing bracket]]

* Start - Opening bracket

Start!
#+begin_src nix
{
  description = "asynthe's system flake";
#+end_src

* Outputs

#+begin_src nix
outputs = inputs @ {
  self,
  nixpkgs,
  #nixpkgs-stable,
  #nixpkgs-wayland,
  #nix-on-droid,
  nix-darwin,
  #nix-gaming,
  home-manager,
  hyprland,
  musnix,
  ...
	}: let
  username = "asynthe";
  hostname = "genkai";

  username_server = "user";
  hostname_server = "basic";
  
  username_mac = "benjamindunstan";
  hostname_mac = "192-168-1-123";

  linux_64 = "x86_64-linux";
  apple_silicon = "aarch64-darwin";

  pkgs = nixpkgs.legacyPackages.x86_64-linux;
  
  in {
#+end_src

*In {* is here as it gives me more flexibility for moving the org boxes.

* Machines
** Linux

#+begin_src nix
nixosConfigurations = {
#+end_src

*** Server (basic)

This basic server configures:
- Networking
- Filesystems

#+begin_src nix
#  basic = nixpkgs.lib.nixosSystem {
#    system = "genkai";
#    specialArgs = {inherit username inputs;};
#
#    modules = [
#      ./machines/laptop_genkai
#
#      inputs.musnix.nixosModules.musnix
#      # HOME MANAGER AS A MODULE GOES INSIDE HERE !!!
#    ];
#    };
#  };
#+end_src

*** Laptop (genkai)

This configures more specific things such as:
- Audio
- Drivers
- More networking
- systemd Timers
- Services
- Window Managers
- Extra
- Tools

#+begin_src nix
  genkai = nixpkgs.lib.nixosSystem {
    system = "genkai";
    specialArgs = {inherit username inputs;};

    modules = [
      ./machines/linux/laptop

      inputs.musnix.nixosModules.musnix
      # HOME MANAGER AS A MODULE GOES INSIDE HERE !!!
      ];
    };
  };
#+end_src

*HOME MANAGER AS MODULE*
Disabled for now, but you can play around with it.

#+begin_src nix
      # Home Manager as a Module
      #home-manager.nixosModules.home-manager
      #{
      #home-manager = {
      #useGlobalPkgs = true;
      #useUserPackages = true;
      #users.${username} = import ./nix/home/linux/home.nix;
      #};
      #}

      # Testing Specialargs on Home Manager Module
      #nixosConfigurations.${hostname} = { nixpkgs.lib.nixosSystem rec {
      #({ config, lib, ... }: {
      #options.home-manager.users = lib.mkOption {
      #type = with lib.types; attrsOf (submoduleWith {
      #specialArgs = { super = config; inherit helix; };
      #});
      #};
      #})
#+end_src

** MacOS [IN PROGRESS]

*Resources*
+ [[https://gist.github.com/jmatsushita/5c50ef14b4b96cb24ae5268dab613050][Setup nix, nix-darwin and home-manager from scratch on an M1 Macbook Pro - gist.github.com]]
+ [[https://github.com/MatthiasBenaets/nixos-config#nix-darwin-installation-guide][nixos-config / MatthiasBenaets - github]]

*** Macbook

#+begin_src nix
darwinConfigurations = {
  ${hostname_mac} = nix-darwin.lib.darwinSystem {
    system = "${apple_silicon}";
    specialArgs = {inherit username_mac inputs;};
    modules = [ ./machines/laptop_macbook ];
    };
  };
#+end_src

111#+begin_src nix
  macOS configuration
    darwinConfigurations =
      let
        system = x64_darwin;
        specialArgs =
        {
          inherit username_mac;
          nixpkgs = import nixpkgs {
            inherit system;
            config.allowUnfree = true;
            };
        }
        // inputs;
       base_args = {
       inherit nix-darwin home-manager system specialArgs nixpkgs;
      };
      in {
      macos = macosSystem (base_args // {
      darwin-modules = [ ./system/macos ];
      home-module = import ./home/darwin;
      });
      };
111#+end_src

** Home Manager

_note_: GNU coreutils it's replaced with Rust's [[https://github.com/uutils/coreutils][uutils]].


#+begin_src nix
      # Home Manager as a Standalone
      homeConfigurations = {
        ${username} = home-manager.lib.homeManagerConfiguration {
          inherit pkgs;
          extraSpecialArgs = {inherit username inputs;};
          modules = [ ./modules/home ];
        };
      };
#+end_src

** Not Used For Now
*** Android (Nix On Droid)

#+begin_src nix
      #nixOnDroidConfigurations.default = #nix-on-droid.lib.nixOnDroidConfiguration {
        #modules = [./nix/nix-on-droid];
      #};
#+end_src

* Inputs
** Opening Bracket

#+begin_src nix
};
 inputs = {
#+end_src

** Nixpkgs and Nixpkgs Stable

#+begin_src nix
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    nixpkgs-stable.url = "github:nixos/nixpkgs/nixos-23.05";
#+end_src

** Home Manager

#+begin_src nix
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs"; 
      # Follows the nixpkgs channel defined before, 
      # to avoid different versions of nixpkgs deps problems.
    };
#+end_src

*NIX DARWIN*
##+begin_src nix
    # For MacOS
    nixpkgs-darwin.url = "github:nixos/nixpkgs/nixpkgs-23.05-darwin";
    nix-darwin = {
      url = "github:lnl7/nix-darwin";
      inputs.nixpkgs.follows = "nixpkgs-darwin";
    };
  };
##+end_src

*NIX ON DROID*
#+begin_src nix
    #nix-on-droid = {
      #url = "github:t184256/nix-on-droid/release-23.05";
      #inputs.nixpkgs.follows = "nixpkgs-stable";
      #};
#+end_src

** Apps and Repos
*** Hyprland

+ [[https://github.com/hyprwm/Hyprland][github page]]

#+begin_src nix
hyprland.url = "github:hyprwm/Hyprland";
#+end_src

*** musnix

+ [[https://github.com/musnix/musnix][github page]]

#+begin_src nix
musnix.url = "github:musnix/musnix";
#+end_src

*** nil - Nix Language server

+ [[https://github.com/oxalica/nil][github page]]

#+begin_src nix
nil.url = "github:oxalica/nil";
#+end_src

*** rust-overlay

+ [[https://github.com/oxalica/rust-overlay][rust-overlay - github page]]

#+begin_src nix
rust-overlay.url = "github:oxalica/rust-overlay";
#+end_src

*** Uncommented

#+begin_src nix
    #nixpkgs-wayland.url = "github:nix-community/nixpkgs-wayland";
    #nix-gaming.url = "github:fufexan/nix-gaming";
    #helix.url = "github:helix-editor/helix/23.05";
#+end_src

** Nix Configuration (Not added)

The closing bracket is from OUTPUTs, i put it here to have more flexibility moving the configurations around.

*nixConfig* should be put inside the configurations, but this will work for now.

##+begin_src nix
  nixConfig = {
      extra-experimental-features = [ "recursive-nix" ];
      extra-subtituters = [
        "https://cache.nixos.org/" # The main cache, you can replace w one closer to you.
        "https://hyprland.cachix.org"
        # Nix community's cache server
        "https://nix-community.cachix.org"
        "https://nixpkgs-wayland.cachix.org"
      ];

      extra-trusted-public-keys = [
        "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
        "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
        "nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA="
        "hyprland.cachix.org-1:a7pgxzMz7+chwVL3/pzj6jIBMioiJM7ypFP8PwtkuGc=" # Hyprland
        "cuda-maintainers.cachix.org-1:0dq3bujKpuEPMCX6U4WylrUDZ9JyUG0VpVZa7CNfq5E=" # Cuda Maintaners, nvidia
      ];
  };
}
##+end_src

* End - Closing bracket

Thanks for Reading!
#+begin_src nix
};
}
#+end_src

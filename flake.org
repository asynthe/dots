#+title: Asynthe's flake
#+property: header-args :tangle flake.nix
#+auto_tangle: t

* Table of Contents :toc:
- [[#description][Description]]
- [[#start][Start!]]
- [[#outputs][Outputs]]
- [[#machines][Machines]]
  - [[#thinkpad][Thinkpad]]
  - [[#wsl][wsl]]
  - [[#server][Server]]
  - [[#home-manager][Home Manager]]
  - [[#macbook-apple-silicon][Macbook (Apple Silicon)]]
- [[#inputs][Inputs]]
  - [[#opening-bracket][Opening Bracket]]
  - [[#inputs-1][Inputs]]
  - [[#uncommented][Uncommented]]
- [[#end---closing-bracket][End - Closing bracket]]
- [[#not-used-for-now][Not Used for Now]]
  - [[#android-nix-on-droid][Android (Nix On Droid)]]

* Description

Linux system
Laptop -> genkai

- /core_server.nix/ contains all that regular system must have.
- /genkai/ contains my current sy
- _basic.nix_ is contained inside _genkai_
- nor /core_server/ nor /genkai/ replaces coreutils

Home manager
- everything else
- hacking tools
home-manager replaces coreutils with the rust uutils

* Start!

#+begin_src nix
{
  description = "asynthe's system flake";
#+end_src

* Outputs

#+begin_src nix
outputs = inputs @ {
  self,
  nixpkgs,
  home-manager,
  disko,
  impermanence,
  sops-nix,
  musnix,
  nixos-wsl,
  #hyprland,
  #nix-darwin,
  #nixpkgs-wayland,
  #nixos-06cb-009a-fingerprint-sensor,
  #nix-gaming,
  #nix-on-droid,
  ...
	}: let

  # Linux / Home
  username = "asynthe";
  hostname = "thinknya";

  # Darwin
  username_mac = "benjamindunstan";
  hostname_mac = "Benjis-Macbook";

  # pkgs
  linux_64 = "x86_64-linux";
  apple_silicon = "aarch64-darwin";
  pkgs = nixpkgs.legacyPackages.x86_64-linux;
  
  in {
#+end_src

*In {* is here as it gives me more flexibility for moving the org boxes.
#+begin_src nix
  nixosConfigurations = {
#+end_src

* Machines
** Thinkpad

Thinkpad T480 and probably a Thinkpad P1 Gen 6 with a RTX 3090. (Let's hope so)

#+begin_src nix
thinkpad = nixpkgs.lib.nixosSystem {
  system = "x86_64-linux";
  specialArgs = { inherit
    inputs
    ;
    user = "ben";
  };
  modules = [
    ./hosts/thinkpad
    disko.nixosModules.disko
    impermanence.nixosModules.impermanence
    musnix.nixosModules.musnix
  ];
};
#+end_src

** wsl

#+begin_src nix
wsl = nixpkgs.lib.nixosSystem {
  system = "x86_64-linux";
  specialArgs = { inherit
    inputs
    ;
    user = "ben";
  };
  modules = [
    ./hosts/wsl
    disko.nixosModules.disko
    impermanence.nixosModules.impermanence
    musnix.nixosModules.musnix
    nixos-wsl.nixosModules.wsl
  ];
};
#+end_src

** Server

PC Server where i save music and media.

#+begin_src nix
server = nixpkgs.lib.nixosSystem {
  system = "x86_64-linux";
  specialArgs = { inherit
    inputs
    ;
    user = "server";
  };
  modules = [
    ./hosts/server
    disko.nixosModules.disko
    impermanence.nixosModules.impermanence
    musnix.nixosModules.musnix
    ];
  };
};
#+end_src

** Home Manager

_note_:
- GNU coreutils is replaced with Rust's [[https://github.com/uutils/coreutils][uutils]].

#+begin_src nix
homeConfigurations = {
  ben = home-manager.lib.homeManagerConfiguration {
    inherit pkgs;
    extraSpecialArgs = {inherit
      inputs
      ;
    };
    modules = [ ./home/ben ];
  };
};
#+end_src

** Macbook (Apple Silicon)

*Resources*
> [[https://gist.github.com/jmatsushita/5c50ef14b4b96cb24ae5268dab613050][Setup nix, nix-darwin and home-manager from scratch on an M1 Macbook Pro - gist.github.com]]
> [[https://github.com/MatthiasBenaets/nixos-config#nix-darwin-installation-guide][nixos-config / MatthiasBenaets - github]]

darwin-rebuild switch --flake .

#+begin_src nix
  #darwinConfigurations = {
  #${hostname_mac} = nix-darwin.lib.darwinSystem {
    #system = "${apple_silicon}";
    #specialArgs = {inherit username_mac inputs;};
      #modules = [ ./hosts/macos ];
  #};
#};
#+end_src

  macOS configuration
    darwinConfigurations =
      let
        system = x64_darwin;
        specialArgs =
        {
          inherit username_mac;
          nixpkgs = import nixpkgs {
            inherit system;
            config.allowUnfree = true;
            };
        }
        // inputs;
       base_args = {
       inherit nix-darwin home-manager system specialArgs nixpkgs;
      };
      in {
      macos = macosSystem (base_args // {
      darwin-modules = [ ./system/macos ];
      home-module = import ./home/darwin;
      });
      };
111#+end_src

* Inputs
** Opening Bracket

#+begin_src nix
};
 inputs = {
#+end_src

** Inputs

#+begin_src nix
# nixpkgs
# https://github.com/NixOS/nixpkgs
nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable"; # Unstable.
#nixpkgs.url = "github:nixos/nixpkgs/nixos-23.11"; # Stable.

# Home Manager
home-manager = {
  url = "github:nix-community/home-manager"; # Follows nixpkgs unstable.
  #url = "github:nix-community/home-manager/release-23.11"; # Follows nixpkgs stable.
  inputs.nixpkgs.follows = "nixpkgs"; 
  # Follows the nixpkgs channel defined before, 
  # to avoid different versions of nixpkgs deps problems.
};

# WSL
nixos-wsl = {
  url = "github:nix-community/NixOS-WSL";
  inputs.nixpkgs.follows = "nixpkgs";
};

# Inputs
impermanence.url = "github:nix-community/impermanence";
disko = {
  url = "github:nix-community/disko";
  inputs.nixpkgs.follows = "nixpkgs";
};

sops-nix.url = "github:Mic92/sops-nix";
musnix.url = "github:musnix/musnix";
#+end_src

** Uncommented

#+begin_src nix
#nil.url = "github:oxalica/nil";
#nixpkgs-wayland.url = "github:nix-community/nixpkgs-wayland";
#nix-gaming.url = "github:fufexan/nix-gaming";
#helix.url = "github:helix-editor/helix/23.05";
#hyprland.url = "github:hyprwm/Hyprland";
#rust-overlay.url = "github:oxalica/rust-overlay";
#+end_src

Darwin
for macOS.
#+begin_src nix
#nixpkgs-darwin.url = "github:nixos/nixpkgs/nixpkgs-23.05-darwin";
#nix-darwin = {
  #url = "github:lnl7/nix-darwin";
  #inputs.nixpkgs.follows = "nixpkgs-darwin";
#};
#+end_src

Nix on Droid
#+begin_src nix
    #nix-on-droid = {
      #url = "github:t184256/nix-on-droid/release-23.05";
      #inputs.nixpkgs.follows = "nixpkgs-stable";
      #};
#+end_src

nixos-06cb:009-fingerprint-sensor
> [[https://github.com/ahbnr/nixos-06cb-009a-fingerprint-sensor][github page]]
#+begin_src nix
#nixos-06cb-009a-fingerprint-sensor = {
  #url = "github:ahbnr/nixos-06cb-009a-fingerprint-sensor";
  #inputs.nixpkgs.follows = "nixpkgs";
#};
#+end_src

* End - Closing bracket

Thanks for Reading!
#+begin_src nix
};
}
#+end_src

* Not Used for Now
** Android (Nix On Droid)

Interesting, might use.

Add this below Machines / Linux.

#+begin_src nix
  #nixOnDroidConfigurations.default =
    #nix-on-droid.lib.nixOnDroidConfiguration {
      #modules = [
        #./nix/nix-on-droid
      #];
    #};
#+end_src


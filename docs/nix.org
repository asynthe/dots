:PROPERTIES:
:ID:       C8352AB6-C0E2-4163-BD97-244843C9E20E
:END:
#+title: Nix

* Nix Language
* Nix Darwin

https://xyno.space/post/nix-darwin-introduction

* Resources

*LINKS*
+ [[https://nixcloud.io/tour/][A tour of Nix]]
+ [[https://nixos.org/manual/nix/stable/][Nix Reference Manual]]

*BLOG*
+ [[https://medium.com/@MrJamesFisher/nix-by-example-a0063a1a4c55#8310][Nix by example - Medium]]

* Nix command/repl

[[https://nixos.wiki/wiki/Nix_command/repl][nixos wiki]]

~nix repl~ is an interactive shell to explore the Nix language as well as configurations,options and packages in Nixpkgs. It supports tab-completion. 

* A tour of Nix
** Let expressions

The let expression is composed of:
~let <bindings> in <body>~

In nix, use the ~let~ construct to bind a _value_ to a _variable_, but also a _function_.
In the ~<body>~ you can then refer to those ~bound values~, even multiple times.

** Strings

Insert ~Strings~ with ~${variable}~

#+begin_src nix
nix-repl> let 
            h = "Hello World";
          in
          { 
            helloWorld = "${h}";
          }
#+end_src

** Integer to string

~${}~ can do more than just *Strings*, you can even run *functions* within it.

Use it as ~${toString variable-name}~

#+begin_src nix
nix-repl> let 
            h = "Strings";
            value = 4;
          in
          { 
            helloWorld = "${h} ${toString value} the win!";
          }
#+end_src

See more builtin functions in the [[https://nixos.org/manual/nix/stable/language/builtins.html][Nix manual]].

** Functions: Introduction

Writing a function that consumes 3 ~Strings~ and combines them to one.

For this we use the ~+~ operator.

#+begin_src nix
nix-repl> let
            f = "f";
            o = "o";
            func = a: b: c: a+b+c;
          in
          {
            foo = func f o "o";
          }
{ foo = "foo"; }
#+end_src

** Functions with 'attribute sets'

Writing a function that consumes 3 ~Strings~ and combines them to one.

We use a ~attribute set~ to define the ~function's~ input arguments.

_example_: ~{a=f;b=o;}~

#+begin_src nix
nix-repl> let
            f = "f";
            o = "o";
            func = {a, b, c}: a+b+c;
          in
          {
            foo = func {a=f; b=o; c=o;};
          }
{ foo = "foo"; }
#+end_src

** Functions: your part...

if ~x < y~ then x else y
- 5 is bigger than 3, so it's
- Therefore the min is 3

#+begin_src nix
nix-repl> let
            min = x: y: if x < y then x else y;
            max = x: y: if x > y then x else y;
          in
          {  
            ex0 = min 5 3;
            ex1 = max 9 4;
          }
{ ex0 = 3; ex1 = 9; }
#+end_src

There's also a implementation, this is ~lib.min~ and ~lib.max~

#+begin_src nix
nix-repl> with import <nixpkgs> { };
          {                           
            ex0 = stdenv.lib.min 5 3; 
            ex1 = stdenv.lib.max 9 4; 
          } 
#+end_src


















:PROPERTIES:
:ID:       889de3b6-1c25-4b59-a844-90955c59c924
:END:
#+title: NixOS Install

* Changes for Flake

- add f2fs.nix
- separate grub encryption (in boot.nix) -> encrypt.nix

#+begin_src nix
grub = {
  enableCryptodisk = true;
};
#+end_src

- add ~silent_boot.nix~ (?)
- add tty.nix (?) console (?)

  #+begin_src nix

  console = {
    earlySetup = true # This doesn't work well with Silent boot.
  };

  services.gpm = {
    enable = true;
    protocol = "ps/2";
   };
  #+end_src

* ZFS + LUKS
* RAID0 + F2FS

- [[https://www.tecmint.com/create-raid0-in-linux/][Creating Software RAID0 (Stripe) on 'Two Device' Using 'mdadm' Tool in Linux - Part 2 - TecMint]]
- [[https://unix.stackexchange.com/questions/68642/how-do-i-set-up-raid0-using-extra-two-drives][How do I set up RAID0 using extra two drives? [closed] - StackExhange]]

** 1. RAID0 with mdadm

Install mdadm
~# apt install mdadm~

Check the disks
~# mdadm --examine /dev/nvme0n1~
~# mdadm --examine /dev/nvme1n1~

Let's create the RAID partitions
~# fdisk /dev/nvme0n1~

Create a partition
~n~
~RET~ -> Partition number 1
~RET~ -> First sector
~RET~ -> Last sector
~p~ -> Print partition (To see you've have only one)
~t~ -> Select that partition
~L~ -> List types of partitions (optional)
~42~ or ~raid~ -> Linux RAID
~p~ -> Again, just to make sure
~w~ -> Write

Now do the same on the other NVME.

Time to create the RAID md Device
~# mdadm -v -C /dev/md0 -l raid0 -n 2 /dev/nvme0n1p1 /dev/nvme1n1p1~

~# mdadm --create /dev/md0 --level=0 --raid-devices=2 /dev/nvme0n1p1 /dev/nvme1n1p1~

~-v or --verbose
~-C or --create
~-l or --level -> RAID0, RAID1...
~-n or ... -> Number of raid devices

Monitor (watch) the array creation
~# watch -n 1 cat /proc/mdstat~

Verify status of *RAID Level*, *Devices* and *Array*.
~# cat /proc/mdstat~
and
~# mdadm -E /dev/nvme0n1 /dev/nvme1n1~

Everything should be working correctly if
~# mdadm --detail /dev/md0~
+ Active devices: 2
+ Working devices: 2

** 2. Creating the F2FS filesystem

- [[https://wiki.archlinux.org/title/F2FS][F2FS - arch wiki]]
- [[https://www.funtoo.org/F2FS_Install_Guide][F2FS Install Guide - Funtoo]]

  If the RAID0 takes the entire of the 2 disk, then i guess i'll have to do a EFI Boot in one of the SATA SSD partitions.

I will also add:
+ Compression
+ File-based encryption support

From the arch wiki, this is the best for all of that.
~# mkfs.f2fs -l nixos -O extra_attr,inode_checksum,sb_checksum,compression /dev/md0~

[Will take some mins]

Now that's ready, let's mount it.
~# mount /dev/md0 /mnt~
You can also mount with the recommended mount options: (For flash devices)
~# mount -o compress_algorithm=zstd:6,compress_chksum,atgc,gc_merge,lazytime /dev/md0 /mnt~

Check that it's mounted and space
~# df -h~

You can now create a file and just check everything works.

** Creating a boot partition (?)

On another disk, create a boot partition.
In my example i'm going to use ~/dev/sda~

~# gdisk /dev/sda~
~n~
~RET~
~RET~
~+2G~
~EF00~
~w~

Format as vfat
~# mkfs.fat -F 32 /dev/sda1~

Mount to /efi
~# mkdir /mnt/efi~
~# mount /dev/sda1 /mnt/efi~

** 2. Creating the F2FS filesystem

- [[https://wiki.archlinux.org/title/F2FS][F2FS - arch wiki]]
- [[https://www.funtoo.org/F2FS_Install_Guide][F2FS Install Guide - Funtoo]]

  If the RAID0 takes the entire of the 2 disk, then i guess i'll have to do a EFI Boot in one of the SATA SSD partitions.

I will also add:
+ Compression
+ File-based encryption support

From the arch wiki, this is the best for all of that.
~# mkfs.f2fs -l nixos -O extra_attr,inode_checksum,sb_checksum,compression /dev/md0~

[Will take some mins]

Now that's ready, let's mount it.
~# mount /dev/md0 /mnt~
You can also mount with the recommended mount options: (For flash devices)
~# mount -o compress_algorithm=zstd:6,compress_chksum,atgc,gc_merge,lazytime /dev/md0 /mnt~

Check that it's mounted and space
~# df -h~

You can now create a file and just check everything works.

** 3. Installing NixOS

~# nixos-generate-config --root /mnt~
~# cd /mnt/etc/nixos~
~# vim configuration.nix~

Copy the mdadm configuration to ~/mnt/etc~
~$ cd~
~$ mdadm --detail --scan --verbose > mdadm.conf~
~# mv mdadm.conf /mnt/etc~

Essential
- Add ~boot.loader.grub.device = [ "nodev" ];~
- Enable NetworkManager
- Add your username to ~users.users.{user}~ and ~initialPassword = "pw123";~ to it.

What to add
#+begin_src nix

#+end_src

Let's install
~$ cd /mnt~
~# nixos-install~

** Creating a boot partition (?)

On another disk, create a boot partition.
In my example i'm going to use ~/dev/sda~

~# gdisk /dev/sda~
~n~
~RET~
~RET~
~+2G~
~EF00~
~w~

Format as vfat
~# mkfs.fat -F 32 /dev/sda1~

Mount to /efi
~# mkdir /mnt/efi~
~# mount /dev/sda1 /mnt/efi~

** 5. Saving the RAID configuration

Save it to one of the files so you can use it in the future
~# mdadm -E -s -v >> /mnt/etc/mdadm.conf~
or
~# mdadm --detail --scan --verbose >> /mnt/etc/mdadm.conf~

Check
~# cat /mnt/etc/mdadm.conf~

/Thanks for reading!/

* After Install
** Installing Home Manager
** Setting up the Flake

Make sure your system has ~git~ and a file editor like ~vim~ or ~nano~ (nano comes by default on NixOS)

Clone the flake
~$ git clone https://github.com/asynthe/flake.git~

Update the flake inputs
~$ nix --extra-experimental-features 'flakes nix-command' -- flake update~


Any update done to the flake will need to be added and commited, but git will ask you first for email and name.
~$ git config --global user.email "<user>@<email>.com"~
then
~$ git config --global user.name "<user>"~
Delete ~--global~ if you want to add only to the repo you're working on.

Then ~$ git add -A && git commit -m 'fixing'~

Then, on the flake folder
~# nixos-re

Time to install *Home Manager*.

Start by adding the home manager channel then installing home manager itself:
~$ nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manage~

_note_: Also add a nixpkgs channel.
I don't know why it couldn't work with my setup until i added nixpkgs channel and also home-manager had to be same release or earlier release.
~$
~$


~$ nix-channel --update~
~$ nix-shell '<home-manager>' -A install~

You will get an error, just _reboot_ the system and run command *again*.

Add this to ~~/.config/home-manager/home.nix~

#+begin_src nix
home.enableNixpkgsReleaseCheck = false;
#+end_src

Once this is set up, proceed to delete ~/etc/nixos~ and ~~/.config/home-manager~ as it will be managed from the flake.

** After the Flake

_NOTE_
fcitx5 configuration menu, remember to add mozc to the menu and change control+space to super+space

* Chroot
** RAID0 + F2FS

~# cat /proc/mdstat~

~# lsblk~
~# mdadm --stop /dev/md127~
~# mdadm --assemble /dev/md0 /dev/nvme0n1p1 /dev/nvme1n1p1~

~# mount -o compress_algorithm=zstd:6,compress_chksum,atgc,gc_merge,lazytime /dev/md0 /mnt~

~# mount /dev/sda1 /mnt/boot~

Rebuild the bootloader.
~$ cd /mnt~
~# nixos-enter~
~# NIXOS_INSTALL_BOOTLOADER=1 /nix/var/nix/profiles/system/bin/switch-to-configuration boot~

* FROM OLD NOTE (NixOS on Encrypted ZFS)

[[nixos on encrypted zfs - lazkani][https://blog.lazkani.io/posts/nixos-on-encrypted-zfs/]]

meow_NIX_!?#
NIXroot#?#
NIXuser_123

* CHROOT
** if LUKS
open the luks partition
~# cryptsetup open --type luks /dev/sda2 crypt~

** if ZFS
import the pool
if not detected, then
~# zpool import -a~

force import
~# zpool import -f nixpool~

mount the zfs datasets
main folder
~# mount -t zfs nixpool/root/nixos /mnt~
home dir
~# mount -t zfs nixpool/home /mnt/home~

** chroot
boot partition
~# mount /dev/sda1 /mnt/boot~

chroot using nixos-enter tool
~$ cd /mnt~
~# nixos-enter~

fixing grub (inside nixos-enter)
~# NIXOS_INSTALL_BOOTLOADER=1 /nix/var/nix/profiles/system/bin/switch-to-configuration boot~

umount and exit

* INSTALL
you can download a unstable (rolling release) iso by going to
NixOS: the Linux distribution -> More ... -> - Old releases are _also available._
[[link][https://releases.nixos.org/?prefix=nixos]] -> unstable -> last one.

** partitioning
we will are going to create the partitions as it follows
- 2GB EFI boot partition
- 20 GB SWAP (really?) set [[zram]] after that better
- rest of disk as main partition
- encrypted with another encrypted swap partitions

*** GUI
**** Gparted
- run the iso on your computer
- run gparted
  - Device -> Create Partition Table... -> gpt (UEFI) / msdos (MBR)

*** CLI
**** sgdisk
#+begin_src
# sgdisk -n3:1M:+1024M -t3:EF00 /dev/disk/by-id/VENDOR-ID
# sgdisk -n1:0:0 -t1:BF01 /dev/disk/by-id/VENDOR-ID
#+end_src

**** Parted
#+begin_src
# parted /dev/sda -- mklabel gpt (UEFI)
# parted /dev/sda -- mkpart primary 512MiB -8GiB
# parted /dev/sda -- mkpart primary linux-swap -20GiB 100%
# parted /dev/sda -- mkpart ESP fat32 512MiB
# parted /dev/sda -- set 3 esp on
# mkfs.ext4 -L nixos /dev/sda1
# mkswap -L swap /dev/sda2
# mkfs.fat -F 32 -n boot /dev/sda3
#+end_src

**** fdisk
#+begin_src
g (gpt)
n
1 (partition number)
2048 (first sector)
+2G (boot size)
t
1 (EFI System)
n
2
default (fill up partition)
default (fill up partition)
w (write)
#+end_src

**** gdisk - CLI - ZFS
-> ~# gdisk /dev/sda~
#+begin_src
n
.
.
+2G
ef00
n
.
.
.
bf00
w
Y
#+end_src

** Filesystems
*** formatting boot device 
format the boot partition first
~# mkfs.vfat /dev/sda1~

**** luks encryption
~# cryptsetup luksFormat --hash sha512 --use-random /dev/sda2~
_extra_: add ~--hash sha512~ and ~--use-random~
~# cryptsetup open --type luks /dev/sda2 crypt~
this will mount the encrypted device in ~crypt~

*** ZFS
**** luks encryption
create a zpool like this
~# zpool create -O mountpoint=none nixpool /dev/mapper/crypt~

**** native encryption


**** datasets
~# zfs create -o mountpoint=legacy nixpool/root~
~# zfs create -o mountpoint=legacy nixpool/root/nixos~
~# zfs create -o mountpoint=legacy nixpool/home~

mounting
~# mount -t zfs nixpool/root/nixos /mnt~
~# mkdir /mnt/{home,boot}~
mounting home dir
~# mount -t zfs nixpool/home /mnt/home~
mounting boot partition
~# mount /dev/sda1 /mnt/boot~

*** BTRFS
*** XFS

time to generate our nix configuration from start
~# nixos-generate-config --root /mnt~
~# cd /mnt/etc/nixos~
~# vim configuration.nix~

**** nixos configuration
generate needed hostId, and write it on a paper
~# head -c4 /dev/urandom | od -A none -t x4~
3a864ad3
also copy and add ~/dev/nvme1n1p2~ uuid with
~$ ls -l /dev/disk/by-uuid/~

[my configuration.nix]

**** nixos installation
once everything's done, you can proceed to make *the nixos install* on your drive
~# cd /mnt~
~# nixos-install~

**** after install
run ~passwd~ to change the user password


--------------------------------
* XDDD
so, remember to change your password
TTY
- Ctrl Alt F1 -> log in via root
- Ctrl Alt F7 -> log in via user

for internet break:
    nixos-rebuild switch --option substitute false # no downloads
    nixos-rebuild switch --option binary-caches "" # no downloads
    wpa_supplicant flags to connect to wifi
